import asyncio
import logging
import random
import regex  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —ç–º–æ–¥–∑–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —é–Ω–∏–∫–æ–¥-–≥—Ä—É–ø–ø—ã)
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart
from dotenv import load_dotenv
import os

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
API_TOKEN = os.getenv("TG_TOKEN")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –ù–∞–±–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö —Ñ—Ä–∞–∑ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç–º–æ–¥–∑–∏ ---
EMOJI_RESPONSES = [
    "üòÄ –û—Ç–ª–∏—á–Ω—ã–π —Å–º–∞–π–ª–∏–∫! –ï—â—ë –æ–¥–∏–Ω –æ—Ç–ø—Ä–∞–≤–∏—à—å?",
    "üòé –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—É–ø–µ—Ä!",
    "üòâ –í—ã–±–∏—Ä–∞–µ—à—å —Ö–æ—Ä–æ—à–æ!",
    "üòÇ –î–∞–∂–µ –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å!",
    "ü§ñ –≠–º–æ–¥–∑–∏ –ø—Ä–∏–Ω—è—Ç—ã, –∫–∞–ø–∏—Ç–∞–Ω!",
    "–¢—ã —Å–µ–≥–æ–¥–Ω—è –≤ —É–¥–∞—Ä–µ!",
    "Lol"
]

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ ---
def is_only_emoji(text: str) -> bool:
    if not text:
        return False
    text = text.strip()
    emoji_pattern = regex.compile(r'^(?:[\p{Emoji}\p{Emoji_Presentation}\p{Emoji_Modifier}\p{Emoji_Modifier_Base}\p{Emoji_Component}]+)$', flags=regex.UNICODE)
    return bool(emoji_pattern.fullmatch(text))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —ç—Ö–æ-–±–æ—Ç. –ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å ‚Äî –∏ —è –ø–æ–≤—Ç–æ—Ä—é!")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
@dp.message()
async def echo_message(message: types.Message):
    if not message.text:
        return  # –ù–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞

    user_text = message.text.lower()

    # –ò–º–∏—Ç–∞—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–±–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ ¬´–ø–µ—á–∞—Ç–∞–µ—Ç¬ª 1 —Å–µ–∫—É–Ω–¥—É)
    await bot.send_chat_action(message.chat.id, "typing")
    await asyncio.sleep(1)

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —ç–º–æ–¥–∑–∏ ‚Äî –æ—Ç–≤–µ—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–π —Ñ—Ä–∞–∑–æ–π
    if is_only_emoji(message.text):
        response = random.choice(EMOJI_RESPONSES)
        await message.answer(response)
        return

    # –ï—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–æ–≤–∞ "–≤—Ä–µ–º—è" –∏–ª–∏ "–≤—Ä–µ–º–µ–Ω–∏", –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    if "–≤—Ä–µ–º—è" in user_text or "–≤—Ä–µ–º–µ–Ω–∏" in user_text:
        current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')
        response = f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}"
        await message.answer(response)
    else:
        await message.answer(message.text)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    # –£–±–∏—Ä–∞–µ–º 'allowed_updates', —Ç–∞–∫ –∫–∞–∫ types.ALL_TYPES –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ aiogram 3
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())